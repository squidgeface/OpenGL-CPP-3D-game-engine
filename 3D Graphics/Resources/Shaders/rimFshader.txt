#version 450 core

in vec3 fragPos;
in vec3 fragNormal;
in vec2 fragTexCoord;

out vec4 color;

uniform sampler2D tex;
uniform float	ambientStr		 = 0.01f;
uniform vec3	ambientColor	= vec3(1.0f, 1.0f, 1.0f);
uniform vec3	lightColor;
uniform vec3	lightPos;

uniform vec3 camPos;
uniform float lightSpecStr = 0.1f;
uniform float shininess = 1.0f;	//Range: 1 - 256
uniform float rimExponent = 64.0f; //lower number = bigger bleed
uniform vec3 rimColor = vec3(1.0f, 0.0f, 0.0f);

void main()
{
//ambient
	vec3 ambient = ambientStr * ambientColor;

//light direction
	vec3 norm = normalize(fragNormal);
	vec3 lightDir = normalize(fragPos - lightPos);

//diffuse coloring
	float diffuseStr = max(dot(norm, -lightDir), 0.0f);
	vec3 diffuse = diffuseStr * lightColor;

//specular highlight
	vec3 negViewDir = normalize(camPos - fragPos);
	vec3 halfwayVec = normalize(-lightDir + negViewDir);
	float spec = pow(max(dot(norm, halfwayVec), 0.0f), shininess);
	vec3 specular = lightSpecStr * spec * lightColor;

//rim lighting
	float rimFactor = 1.0f - dot(norm, negViewDir);
	rimFactor = smoothstep(0.0f, 1.0f, rimFactor);
	rimFactor = pow(rimFactor, rimExponent);
	vec3 rim = rimFactor * rimColor * lightColor;
	
	color = vec4(ambient + diffuse + specular + rim, 1.0f) * (texture(tex, fragTexCoord));
	//if (color.a < 0.1)
      //discard;

}